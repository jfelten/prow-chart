apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}.hookinstall"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    # secret names required by prow:  oauth, jenkins, hmac
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      name: "{{.Release.Name}}.hookinstall"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      restartPolicy: Never
      containers:
      - name: install-hooks-job
        image: "{{ .Values.images.hook_manager }}"
        env:
        - name: BOT_USER_ID
          value: "{{ .Values.githubBotAccount }}"
        - name: HOOK_URL
          value: "{{ .Values.githubHookConsumerAddress }}"
        - name: REPOS_TO_HOOK
          value: "( {{ .Values.repos }} )"
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: hookmanager-cred
              key: auth_token
        - name: INSTALL_SCRIPT
          value: &script |-
            HMAC_KEY=`/hook_manager create_hmac` #used by the webhook security
            echo $HMAC_KEY >hmac
            kubectl create secret generic hmac --from-file=./hmac
            rm -f ./created_hooks
            for repo in "${REPOS_TO_HOOK[@]}"
            do
              echo "creating hook for repo: ${repo}"
              HOOK_ID=`/hook_manager create_webhook --credentials=${BOT_USER_ID}:${AUTH_TOKEN} --url=${HOOK_URL} --repo=${repo}`
              echo "${HOOK_ID}:${repo}" >> created_hooks
            done
            kubectl delete secret created-hooks
            kubectl create secret generic created-hooks --from-file=./created_hooks
        command: ["bash"]
        args: ["-c", *script]
      